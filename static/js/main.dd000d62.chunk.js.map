{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","SORT_FIELD_NONE","sortField","setSortField","reversedField","setReversedField","visibleGoods","goods","toReverse","preparedGoods","sort","good1","good2","SORT_FIELD_ALPH","localeCompare","SORT_FIELD_LENGTH","length","reverse","getPreparedGoods","className","type","onClick","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,uBAAAA,E,2BAAAA,E,oBAAAA,M,KAmCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAASH,EAASI,iBAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0CH,oBAAkB,GAA5D,mBAAOI,EAAP,KAAsBC,EAAtB,KAEMC,EAjCR,SACEC,EACAL,EACAM,GAEA,IAAMC,EAAa,YAAOF,GAqB1B,OAnBIL,GACFO,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQV,GACN,KAAKL,EAASgB,gBACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKf,EAASkB,kBACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXR,GACFC,EAAcQ,UAGTR,EAOcS,CACnBpB,EAAiBI,EAAWE,GAG9B,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,kBAAMlB,EAAaN,EAASgB,kBACrCM,UAAWG,IAAG,iBACZ,CAAE,WAAYpB,IAAcL,EAASgB,kBAJzC,iCASA,wBACEO,KAAK,SACLC,QAAS,kBAAMlB,EAAaN,EAASkB,oBACrCI,UAAWG,IAAG,oBACZ,CAAE,WAAYpB,IAAcL,EAASkB,oBAJzC,4BASA,wBACEK,KAAK,SACLC,QAAS,kBAAMhB,GAAkBD,IACjCe,UAAWG,IAAG,oBACZ,CAAE,YAAalB,IAJnB,sBASgB,KAAdF,IAAsC,IAAlBE,IACpB,wBACEgB,KAAK,SACLD,UAAU,4BACVE,QAAS,WACPlB,EAAaN,EAASI,iBACtBI,GAAiB,IALrB,sBAaJ,6BACGC,EAAaiB,KAAI,SAAAC,GAAI,OACpB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YCxGnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.dd000d62.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  SORT_FIELD_ALPH = 'alph',\n  SORT_FIELD_LENGTH = 'length',\n  SORT_FIELD_NONE = '',\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortField: SortType,\n  toReverse: boolean,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.SORT_FIELD_ALPH:\n          return good1.localeCompare(good2);\n\n        case SortType.SORT_FIELD_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (toReverse) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortType.SORT_FIELD_NONE);\n  const [reversedField, setReversedField] = useState<boolean>(false);\n\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer, sortField, reversedField,\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => setSortField(SortType.SORT_FIELD_ALPH)}\n          className={cn('button is-info',\n            { 'is-light': sortField !== SortType.SORT_FIELD_ALPH })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setSortField(SortType.SORT_FIELD_LENGTH)}\n          className={cn('button is-success',\n            { 'is-light': sortField !== SortType.SORT_FIELD_LENGTH })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setReversedField(!reversedField)}\n          className={cn('button is-warning',\n            { 'is-light': !reversedField })}\n        >\n          Reverse\n        </button>\n\n        {(sortField !== '' || reversedField !== false) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortField(SortType.SORT_FIELD_NONE);\n              setReversedField(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}